#!/bin/echo
# vim: ft=sh

has() {
  which "$1" >/dev/null 2>&1
  return $?
}

abspath() {
  echo "abspath() renamed to expand_path()"
  expand_path "$1"
}

expand_path() {
  { cd "$(dirname "$1")" 2>/dev/null
    local dirname="$PWD"
    cd "$OLDPWD"
    echo "$dirname/$(basename "$1")"
  } || echo "$1"
}

# Safer PATH handling
PATH_add() {
  export PATH="`expand_path "$1"`:$PATH"
}

layout_ruby() {
  # TODO: ruby_version should be the ABI version
  local ruby_version=`ruby -e"puts (defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby') + '-' + RUBY_VERSION"`
  PATH_add ".direnv/${ruby_version}/bin"
  PATH_add "bin"
  export RUBYLIB=$PWD/lib
  export GEM_HOME=$PWD/.direnv/${_ruby_version}
  export RBXOPT=-Xrbc.db=$PWD/.direnv/rbx-cache
}

layout() {
  eval "layout_$1"
}

# This folder contains a <program-name>/<version> structure
cellar_path=/usr/local/Cellar
set_cellar_path() {
  cellar_path=$1
}

# $1: program name
# $2: wanted version
use() {
  local path="$cellar_path/$1/$2/bin"
  if [ -d "$path" ]; then
    echo "Using $1 v$2"
    PATH_add "$path"
  else
    echo "* Unable to load $path"
  fi
}

set_program_prefix() {
  echo '`set_program_prefix` was renamed to `set_cellar_path`'
}

add_program() {
  echo '`add_program` does not exist anymore and was replaced by `use`'
}

# Inherit another .envrc
source_env() {
  local rcfile=$1
  if [ -d "$1" ]; then
    rcfile=$1/.envrc
  fi
  echo "direnv: loading $rcfile"
  pushd `dirname "$rcfile"` > /dev/null
  . ./`basename "$rcfile"`
  popd > /dev/null
}

if [ -n "$rvm_path" ]; then
  # source rvm on first call, haha :)
  rvm() {
    unset rvm
    set +e
    . "$rvm_path/scripts/rvm"
    rvm $@
    set -e
  }
fi
